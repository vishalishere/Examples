//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************

using org.alljoyn.Bus.Samples.Secure;
using SDKTemplate;
using System;
using System.ComponentModel;
using System.Windows.Input;
using Windows.Devices.AllJoyn;
using Windows.Security.Cryptography;
using Windows.Storage.Streams;
using Windows.UI.Core;

namespace AllJoynSecureServer
{
    class ServerViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        private MainPage rootPage;
        private CoreDispatcher m_dispatcher;
        private string m_key = "";
        private bool isLaunched = false;

        protected void OnPropertyChanged(string name)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(name));
            }
        }

        public ServerViewModel()
        {
            m_dispatcher = Windows.UI.Core.CoreWindow.GetForCurrentThread().Dispatcher;
            rootPage = MainPage.Current;
        }

        public string Key
        {
            get
            {
                return m_key;
            }
            private set
            {
                m_key = value;
                OnPropertyChanged("Key");
            }
        }

        public ICommand LaunchServer
        {
            get
            {
                return new RelayCommand((object args) =>
                {
                    Start();
                });
            }
        }

        public void Start()
        {
            // Prevent from Launching the server again if it is already launched.
            if (isLaunched)
            {
                UpdateStatus("Already launched.", NotifyType.StatusMessage);
            }
            else
            {
                UpdateStatus("Launching...", NotifyType.StatusMessage);

                AllJoynBusAttachment alljoynBusAttachment = new AllJoynBusAttachment();
                alljoynBusAttachment.AuthenticationMechanisms.Clear();
                alljoynBusAttachment.AuthenticationMechanisms.Add(AllJoynAuthenticationMechanism.EcdhePsk);
                alljoynBusAttachment.AuthenticationComplete += AlljoynBusAttachment_AuthenticationComplete;
                alljoynBusAttachment.CredentialsRequested += AlljoynBusAttachment_CredentialsRequested;

                // Generate the one-time pre-shared key.
                // For demonstration purposes, this sample uses a low entropy key. 
                // For all practical implementations, it is highly recommended that 
                // developers generate a high entropy key (128 bits recommended).
                IBuffer randomBuffer = CryptographicBuffer.GenerateRandom(5);
                Key = CryptographicBuffer.EncodeToHexString(randomBuffer);

                // Initialize the producer object generated by the AllJoynCodeGen tool.
                SecureInterfaceProducer producer = new SecureInterfaceProducer(alljoynBusAttachment);

                // Instantiate SecureInterfaceService which will handle the concatenation method calls.
                producer.Service = new SecureInterfaceService();

                // Start listening for consumers.
                producer.Start();

                UpdateStatus("Launched.", NotifyType.StatusMessage);
                isLaunched = true;
            }
        }

        private void AlljoynBusAttachment_AuthenticationComplete(AllJoynBusAttachment sender, AllJoynAuthenticationCompleteEventArgs args)
        {
            if (args.Succeeded)
            {
                UpdateStatus("Authentication was successful.", NotifyType.StatusMessage);
            }
            else
            {
                UpdateStatus("Authentication failed.", NotifyType.ErrorMessage);
            }
        }

        private void AlljoynBusAttachment_CredentialsRequested(AllJoynBusAttachment sender, AllJoynCredentialsRequestedEventArgs args)
        {
            if (args.Credentials.AuthenticationMechanism == AllJoynAuthenticationMechanism.EcdhePsk)
            {
                args.Credentials.PasswordCredential.Password = m_key;
            }
            else
            {
                UpdateStatus("Unexpected authentication mechanism.", NotifyType.ErrorMessage);
            }
        }

        private async void UpdateStatus(string status, NotifyType statusType)
        {
            await m_dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                rootPage.NotifyUser(status, statusType);
            });
        }
    }
}
